#summary The overall look at the interchangable units of Zupal

= Introduction =

The Module system is still extremely transient; here are the current working principles. However it is ultimately the *ONLY REASON ZUPAL EXISTS*. Zend Framework is on its own quite adequate for single project site generation; where it fails is that it doesn't have a contract system for reusable components. 

The Zupal Module will when complete be a template for a reusable component with contracts into the node system for interchange of data and access to the shared admin resource.

= Details =

The Zupal module system is still very raw; however there are a few principles in place.

   # Zupal modules are extensions of the Zend Module System and use all conventions found therein.
   # Because Zupal modules, unlike Zend Modules, include their own bundle of resources that are only used in the context of the module, they contain a Library folder.
   # All Zupal Classes, inside and outside of modules, are prefixed with Zupal_. All Zupal module classes and models are prefixed with Zupal_[classname]. This also means that to respect the Zend autoloader conventions, the model and library folders are "deep" in order to create the relative classpaths.
   # Modules will be installed and uninstalled through the Admin menu.
   # At some point dependency will be a feature of the module system; til then, any resources that more than one module depends on will be globally accessible in the core library and models folders, and modules wil be entirely independent.**

= Files and Classes =

http://wonderlandlabs.com/wll_drupal/sites/default/files/Modules.png

Modules have two configuration files, stored in their root: info.xml and menu.xml.* 

The info file is digested by Zupal_Module_Manager_Item. It contains a name, description and menu field and a host of other documentary tags, but should also have any other configuration variables that the module itself uses (prefs, default, language, etc.)

The menu file is digested by Zupal_Menu whenever an action is called from the module, and is inserted as a submenu of the module link on the main menu. Note that the name of the menu file is a field of the info file; if the info file has no menu node (or an empty one) no submenu will be loaded for that module. 

Modules must have a manager class that implements Zupal_Module_IModule in its library. This interface has three methods:

  * *install*()
  * *uninstall*()
  * *can_install*()

The nature of these methods are completely optional. However install should install all tables using the "IF NOT EXISTS" switch to enable repeated re-installs. 

The can_install() method should return a boolean and detect any required libraries, tables, etc. You can presume it to have returned true before install() is ever called. 

Although there are no requirements on uninstall, it is recommended that you do not delete tables/records when uninstalling a module. 

None of the methods of your Zupal_Module_IModule class should generate visible markup. 

= The Library Folder =

The Library folder is one of the most noticeable deviation with the MVC conventions of ZF. Unlike ZF's global library, each module needs an independent repository of resources that are self contained within the module itself. Also all contents of the library must be namespaced to the specific module for guaranteed namespace containment within the module. 

The only required content of this folder is /[module]/Library/[module]/Manager.php

Which implements the Zupal_Module_IModule interface. 

= Some Useful Conventions =

There is far to little work done in Zupal to nail down any rules as to how a module should go about its business. However it is reccommended that for most simple modules (with a single node based table as their basis) to have two controllers: an index controller for the destination page and a second item controller for CRUD operations on that content. 

----

`*`  In keeping with the "design by contract" scheme of ZF, the INI format will be acceptable for config files when the system is fleshed out as well as XML and who knows, maybe even YAML.

`**` this rule excludes the core admin and default modules, which should be static; modules can depend on any content in those modules going forwards. 
#labels model,doctrine,Phase-Design,Featured
This is likely to get wildly out of date but the class heirarchy of the current Zupal version (r89) is this:

http://wonderlandlabs.com/wll_drupal/sites/default/files/interfaces_2.gif

The class Zupal_Domain_Abstract is a domain class that has methods that return a table, the objects' record, and a host of methods for basic record retrieval.

The find(), find_one(), and find_all() methods are intended to facilitate simple queries that do not involve joined tables. They may not satisfy 100% of your data retrieval needs but do provide a quick method of getting filtered sorted records when all you want to do is find records matching one or more criteria (as in, find all records whose name LIKE "Leslie".).

There were discussions about whether or not Zupal would be better served with Doctrine or the Zend_Db classes; in part the interface approach was taken to enable either approach but the current implementation is a Zend_DB driven one.

= Zupal_Domain_Abstract =

The Domain abstract is designed to bridge access to a database table. Note that it does not include node functionality; it can be applied to any table, even one outside a modules' scope, as the table() property handles all IO. While the Domain class was designed to facilitate node based I/O, it is functional on its own and can be adapted to any table you need. 

The current roster of methods in the Domain abstract class include the interface methods plus:

    * *asStub*(): because the domain object has two frequent use cases -- that of a table and that of a record, there is functionality to "stub out" the domain object. A Domain Stub cannot save itself; this is insulation against inadvertant committing of data from an object that was not intended to represent a specific record. (and yes it can be turned off.)
    * *get*(id): note this is the id of the table, not the node ID.
    * *identity*(): the ide of the table.
    * *link*(): a utility class to produce markup to view the record.
    * *loaded*(): a boolean method that determines if the domain record has data. (redundant with saved() - probably will be deprecated).
    * *newRow*(): inserts a new (unsaved) Zend_Db_Table_Row into the _row property.
    * *table*(): Zend_DB_Table_Abstract implementor. Uses tableClass() to produce a singleton of the adaptor for the table.
    * *tableClass*(): string; the name of the table class.
    * *_select*(): returns a Zend_DB_Table_Select object.

== Table Classes ==

Every domain class has a table class that it is bound to. By convention the table class is named as a variant of the domain object -- if you have a domain class Zupal_Places, its table class is Zupal_Table_Places, etc. The table class is pretty thin -- it has the id/table name properties.

The one functionality it has that extends beyond the simple activeRecord pattern is that the table class creates a  table in the database if none exists. This implementation is still being worked out. 

= Zupal_Node_Abstract implementation =

A Zupal_Node domain object is composed to a Zupal_Node object. Zupal_Node is a domain object that governs the zupal_nodes' table. Because of this, Zupal_Node_Abstract and its implementing classes are composites of the zupal_nodes table and a related table (or tables) that have decorative data that customizes the implementing class.

For instance, the Zupal_Content class has as its base table zupal_content; however, its node_id field links to the node table and the Zupal_Node_Abstract maintains this relationship invisibly, spawning or saving a node record linked to the metatable when the record is save()d.

It extends Zupal_Domain_Abstract (above) and adds a few other methods:

    * *node_field*(): string -- the name of the field in the metatable that links to the node table -- node_id() by default.
    * *node*() -- returns the node domain object that this record links to.
    * *status*(override: boolean) : int[] returns a series of flags that reflect the status of the record. Possible values include any combination of:
{{{
    const STATUS_LIVE = 1;
    const STATUS_HOMEPAGE = 2;
    const STATUS_BANNED = 4;
    const STATUS_FLAGGED = 8;
    const STATUS_ARCHIVED = 16;
    const STATUS_DELETED = 32;
}}}
However because a deleted record is not (by definition) live or visibile on the home page, if you pass true, those options are supressed for all deleted records.

incidentally, these flags are detectable in SQL using bitwise operators
{{{
SELECT * from zupal_content 
LEFT JOIN zupal_nodes on zupal_content.node_id = zupal_nodes.node_id 
WHERE zupal_nodes & 2
}}}
to find homepage content.

    * *_select*(): returns a Zend_Db_Select object that is joined with the node table.

= Joins =

There is a very important distinction between the Zend_Db_Select object returned by the _select() method of Zupal_Domain_Abstract and the Zend_Db_Table_Select object returned by the _select() method of the Zupal_Node_Abstract method: the table_select  version does NOT support the join construct -- you are limited to operations on a single table.

If you want to create a non-noded domain class that spans (or even refers) to other tables, you will need to add a _select() method that calls a select object from the tables' getAdapater() method. 

Another word of warning -- you cannot just dump a row from a non table based query into the constructor of a Zupal_Domain_Abstract/ Node_Abstract based record -- you have to dump it into a row from the table, or save() won't work as expected. 

= Versioning = 

Content in Zupal can be versioned -- that is, more than one record in a metatable can refer to the same node. If the _versioned flag is set to true for a specific table, the 
find() family of methods return the records referred to by the version field in the node table.

= Retrieval Efficiency =

There has been effort made in the aggregate find() method to drive all retrieval from a single query. Because of some of Zend_DB's quirks this requires a bit of handstands in the find() method, but to date (and without thorough testing to back it up) Zupal avoids the freqent and painful pattern of multiple queries to retrieve aggregate data. 

There hasn't been an effort to bridge the data into any caching system - this is a big to do. 
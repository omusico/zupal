#labels ORM,Zupal3
The data access layer of Zupal

= Introduction =

Of all the components of Zupal, this one has been the one I have used in production and developed in earnest. 

The basic principle of the Zupal model layer is that data objects are developed through schema definitions, in YAML or JSON. These definitions are field lists with settings such as required, default or serial that determine how they behave and what kind of values they can take. 

While the ultimate aim is a model system that works with any repository the initial primary client of the ORM is Mongo, a JSON based ORM with no intrinsic schema. Because of this, the code level schema is designed to do all the heavy lifting. 

== Interface Driven == 

As much as possible I have created interface files for the fundamental building blocks. While much custom repository functionality cannot be reduced to a platonic interface, the interface does provide a common pattern for routine operations. 

== Model Class Families ==

There are several families of classes in the Zupal Model system. 

  *  *Containers* : these are the repositories - tables, collections, filesystems, whatever. Containers govern the actual I/O of data into persistent states. They have several query oriented methods (find(), find_all(), etc.). 

  *  *Data* : These objects represent units of information: records, documents, etc. Their primary methods are delete() and save(). They are equivalent in many ways to an ActiveRecord. 

  *  *Schema* : These are collections of field definitions. Field definitions themselves may be scalar, or single or serial collections of classes. Typically a single data object is bound internally to a specific schema, and a single container only accepts data that is valid for its schema, but this is not necessarily the case. Many preset field definitions for basic field types like strings, integers, etc. are packaged with Zupal. 

  *  *Queries* : These represent criteria for retrieval methods of containers. Their inteface is a single method - get_data(Collector $c) - but most places that accept queries as objects also accept simple arrays [field: expectedValue, field: expectedValue... ].

== Domains ==

A domain is an object that subsumes both data, an internal container, and a schema. A domain has factory behavior in that it can create more domains, and ActiveRecord behavior in that it represents a single clump of data that can be save()d or delete()d. 

A domain is not limited to managing a single Repository (table, collection, etc.) It should govern a single unit of information but that unit can be stored in multiple repositories. For instance, a resume might be managed by a single domain, but that domain can subsume several repositories (one for job history, one for education history, one for skill set, etc.) 

Because the Domain is a hybrid of several interfaces (Zupal_Model_Data_IF, Zend_Paginator_Adapter_Interface, Zupal_Model_Container_IF, and others) it does not have a unique interface of its own.

Note - while I find Domains quite useful, they are not an absolutely necessary part of Zupal3's ORM; the Data, Schema and Collection classes work fine on their own. 

= Usage Example =

Here is a basic schema set for a blog with comments and users. The schema are in YAML. Fair warning - this is "off the top of my head" code that hasn't been tested - use with caution. 

{{{
fields:
  
  _id: 
    type:      mongoid
    key:        true

  title: 
    type:      string
    required:  true

  author:      mongoid

  intro:       string

  body:  
    type:      string
    required:  true

  comments:
     type:   class
     class:  Sample_Model_Comment
     serial: true
}}}

and the author schema:

{{{

fields:
   
    name:         string
 
    alias:
       type:      string
       required:  true

    password_md5:
       type:      string
       required:  true

    notes:        string
}}}

and the comment schema:

{{{

field:

  title:        string
  
  comment:     
    type:       string
    required:   true
    max:        1000

  author:       mongoid  

  created:
    type:       date
    default:    NOW
}}}

The class to represent an article is quite simple as the schema does most of the heavy lifting:

{{{

<?php

class Sample_Model_Article
        extends Zupal_Model_Domain_Abstract {

    public function new_data($pData) {
        return new self($pData);
    }

    private static $_container;

    /**
     *
     * @return Zupal_Model_Container_MongoCollection
     */
    public function get_container() {
        if (!self::$_container) {
            self::$_container = new Zupal_Model_Container_MongoCollection(
                            'cms', 'articles', array('schema' => $this->schema()));
        }
        return self::$_container;
    }

    private static $_schema;

    public function schema() {
        if (!self::$_schema) {
            /** note - the Pools_Api_Util_Disk::path_synonym($path, $type)
             *  is a utility method that digests a YAML file in this directory
             *  that has the same name as this file, but a 'yml' suffix. 
             */

            $path = Pools_Api_Util_Disk::path_synonym(__FILE__, 'yml');
            self::$_schema = Zupal_Model_Schema_Item::make_from_yml($path);
        }
        return self::$_schema;
    }

} // end class

}}}

Classes that are compositional elements of parent classes (i.e., that represent documents that are parts of larger document but are not intended to be saved and created independantly) are descended from subdata. Commments, in this particular use case, are embedded elements of articles:

{{{

<?php

class Sample_Model_Article_Comment
        extends Zupal_Model_Data_SubData {

    private static $_schema;

    public function get_schema() {
        if (!self::$_schema) {
            $path = Pools_Api_Util_Disk::path_synonym(__FILE__, 'yml');
            self::$_schema = Zupal_Model_Schema_Item::make_from_yml($path);
        }

        return self::$_schema;
    }

...

}

}}}

Given the above we can accomplish quite a lot: 

{{{

/**
 * The "line by line" approach:
 */

$article = new Sample_Model_Article();

$article->title = 'An Article';
$article->body = 'Stunningly powerful prose';

// note - according to the schema that is all we need!

$article->save();

error_log(__FILE__ . ': created article with id ' . $article->key());

$comment = new Sample_Model_Article_Comment($article->record());
$comment->title = 'Stunningly boring, maybe';
$comment->body  = "I'd be more specific but I don't think I can do so in only 1000 characters.";

$article->comments[] = $comment;

$article->save();

error_log(__FILE__ . ': final unit of information: ' . print_r($article->toArray(), 1));

}}}

A nice display of field magic, but not as compact as it could be; how about: 

{{{

$data = array(
  'title' => 'An Article', 'body' => 'Stunningy powerful prose',
  'comments' => array(
     array(
       'title' => 'Stunningly boring, maybe', 
       'body' => "I'm not going to be more specific" )
   )
);

/**
 * note - the nested comment will be converted to a class 
 * upon digestion of the data array
 */

$article = new Sample_Model_Article($data);

$article->save();

}}}

Once this article has been searched for you can find it thusly:

{{{

$a_stub = new Sample_Model_Article(); 

$article = $a_stub->find_one(array('title' => 'An Article'));

error_log(__FILE__ . ': the article with title "An Article" : ' . print_r($article->toArray(), 1));

}}}

I have found this combination of configuration - driven schema, nested objects and terse class definitions to give me a lot of flexibility in how I construct and use data. Hopefully you find it useful as well. 
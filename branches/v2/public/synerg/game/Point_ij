package game{	import Synerg;	import flash.geom.Point;	import flash.utils.Dictionary;	import de.polygonal.ds.*;	class Point_ij extends Point {		public index;		public can_go: Vecgtor.<Boolean> = new Vector.<Boolean>(8, true);		public function Point_ij(i, j, pIndex) {			set_ij(i, j);			index = pIndex;			for (var iter = 0; iter < 8; ++iter) {				var vect:Point = Point_ij.COMPASS_OFFSETS[iter];				var ij:Point = add(vect);				can_go[iter] = Synerg.on_board(ij.x, ij.y);			}		}						public function get_i():int {			return x;		}		public function set_i(i):void {			x=int(i);			set_value();		}		public function get_j():int {			return y;		}		public function set_j(j):void {			y=int(j);			set_value();		}				static const COMPASS_E = 0;		static const COMPASS_SE = 1;		static const COMPASS_S = 2;		static const COMPASS_SW = 3;		static const COMPASS_W = 4;		static const COMPASS_NW = 5;		static const COMPASS_N = 6;		static const COMPASS_NE = 7;				static const COMPASS_OFFSETS: Vector.<Point> = new Vector([		 new Point(1, 0), new Point(1, -1), new Point(0, -1),		 new Point(-1, -1), new Point (-1, 0), new Point (-1, 1),		 new Point(0, 1), new Point(1, 1)]);		public function set_ij(i, j) {			x=int(i);			y=int(j);			set_value();		}		private var _value:int;		private var _on_board:Boolean;		public function on_board() {			return _on_board;		}		private function set_value():void {			_on_board=Synerg.on_board(x,y);		}		public function value():int {			return _value;		}		private static var _points:Array2;		private static function _init_points() {			var iter = 0;						_points=new Array2(Synerg.BOARD_SIZE,Synerg.BOARD_SIZE);			for (var i_iter = 0; i_iter < Synerg.BOARD_SIZE; ++i_iter) {				for (var j_iter = 0; j_iter < Synerg.BOARD_SIZE; ++j_iter) {					var pt:Point_ij = new Point_ij(i_iter, j_iter, iter++);					_points.set(i_iter, j_iter, pt);									}			}		}		public static function points(): Array2 {			if (! _points) {				_init_points();			}			return _points;		}				public static function point(i, j):Point_ij {						if (!Synerg.on_board(i, j)) return NULL;			return points().get(i, j);		}						public static function add_wall(w: Wall){			var p1:Point_ij = w.p1_ij();			var p2:Point_ij = w.p2_ij();						if (p1 && p2){				p1.block(p2);				p2.block(p1);			}		}	}}